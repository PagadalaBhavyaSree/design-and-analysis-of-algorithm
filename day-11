#problem-1:-
  from collections import defaultdict

def can_color(graph, coloring, node, color):
    for neighbor in graph[node]:
        if coloring[neighbor] == color:
            return False
    return True

def graph_coloring(graph, n, k):
    coloring = [-1] * n  # -1 means uncolored
    
    def dfs(node):
        if node == n:
            return True
        for color in range(k):
            if can_color(graph, coloring, node, color):
                coloring[node] = color
                if dfs(node + 1):
                    return True
                coloring[node] = -1
        return False

    return dfs(0)

def max_regions_colored(graph, n, k):
    # Maximizing the regions colored by you (i.e., the first player)
    graph_coloring(graph, n, k)
    return sum(1 for color in coloring if color != -1)  # Count how many regions were colored by you
#problem-2:-
  def is_hamiltonian_cycle(graph, n):
    path = [-1] * n
    
    def is_safe(v, pos):
        if v not in graph[path[pos-1]]:
            return False
        for i in range(pos):
            if path[i] == v:
                return False
        return True

    def hamiltonian_cycle_util(pos):
        if pos == n:
            return graph[path[pos-1]][path[0]]  # Check if last node connects to first

        for v in range(1, n):
            if is_safe(v, pos):
                path[pos] = v
                if hamiltonian_cycle_util(pos + 1):
                    return True
                path[pos] = -1
        return False

    path[0] = 0
    return hamiltonian_cycle_util(1)
#problem-3:-
          from itertools import combinations

def generate_subsets(nums):
    subsets = []
    nums.sort()  # Sorting for lexicographical order
    for i in range(len(nums) + 1):
        subsets.extend(combinations(nums, i))
    return [list(subset) for subset in subsets]
#problem-4:-
  def generate_subsets_containing_x(nums, x):
    subsets = []
    for i in range(len(nums) + 1):
        for combo in combinations(nums, i):
            if x in combo:
                subsets.append(list(combo))
    return subsets
#problem-5:-
          from collections import Counter

def word_subsets(words1, words2):
    def get_freq(word):
        return Counter(word)

    def is_universal(word, target_freq):
        word_freq = get_freq(word)
        for char, count in target_freq.items():
            if word_freq[char] < count:
                return False
        return True

    target_freq = Counter()
    for word in words2:
        word_freq = get_freq(word)
        for char, count in word_freq.items():
            target_freq[char] = max(target_freq[char], count)

    return [word for word in words1 if is_universal(word, target_freq)]
